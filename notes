#!/usr/bin/env python

import click

from os import system, makedirs
from os.path import expanduser, isdir, split
from shutil import move

# defaults
DEFAULT_PATH = expanduser("~")+"/.notes"

# create command group needed for subcomands
@click.group(invoke_without_command=True)
@click.option('--force', '-f', is_flag=True)
@click.option('--path', '-p', envvar='NOTES_PATH', default=DEFAULT_PATH, show_default=True)
@click.pass_context
def cli(ctx, path, force):
    ctx.obj["path"] = path
    ctx.obj["force"] = force
    ctx.obj["gitCommand"] = "git -C " + path + " "

    if ctx.invoked_subcommand is None:
        system('tree --noreport ' + path)


@cli.command('init')
@click.pass_context
def init(ctx):
    """Initialize notes directory"""

    # create local copies of ctx vaiables for easy access
    path = ctx.obj["path"]
    force = ctx.obj["force"]

    if(isdir(path) and not force):
        print("Cannot create a notes directory at", path, "Path already exists")

    else:
        print("Creating notes archive at ", path)
        system("git init " + path)


@cli.command('show')
@click.argument('name')
@click.pass_context
def show(ctx, name):
    """Show contents of note"""

    # create local copies of ctx vaiables for easy access
    path = ctx.obj["path"]

    if(not isdir(path)):
        print("No notes directory found at " + path)

    else:
        system('cat ' + path + "/" + name)


@cli.command('edit')
@click.option('--header', '-h', envvar='NOTES_HEADER', default='', help="Header to include in new notes files")
@click.argument('name')
@click.pass_context
def edit(ctx, name, header):
    """Edit contents of a note"""

    # create local copies of ctx vaiables for easy access
    path = ctx.obj["path"]
    gitCommand = ctx.obj["gitCommand"]

    if(not isdir(path)):
        print("No notes directory found at " + path)
        return

    if(header != ''):
        system('touch ' + path + '/' + name)
        system('echo ' + header + " > " + path + '/' + name)

    system('$EDITOR ' + path + "/" + name)
    system(gitCommand + "add .")
    system(gitCommand + "commit -m 'edited " + name + "'")


@cli.command('git')
@click.argument('commands', nargs=-1)
@click.pass_context
def git(ctx, commands):
    """Run git command on notes folder"""

    # create local copies of ctx vaiables for easy access
    gitCommand = ctx.obj["gitCommand"]

    system(gitCommand + " ".join(commands))


@cli.command('rm')
@click.argument('name')
@click.pass_context
def rm(ctx, name):
    """Removed a note or a section of notes"""

    # create local copies of ctx vaiables for easy access
    path = ctx.obj["path"]
    gitCommand = ctx.obj["gitCommand"]

    if(not isdir(path)):
        print("No notes directory found at " + path)

    else:
        system('rm -r ' + path + "/" + name)
        system(gitCommand + "add .")
        system(gitCommand + "commit -m 'removed " + name + "'")


@cli.command('mv')
@click.argument('toname')
@click.argument('fromname')
@click.pass_context
def mv(ctx, fromname, toname):
    """Move a note from one place to another"""

    # create local copies of ctx vaiables for easy access
    path = ctx.obj["path"]
    gitCommand = ctx.obj["gitCommand"]

    if(not isdir(path)):
        print("No notes directory found at " + path)

    else:
        dir_name, _ = split(path + "/" + toname)
        makedirs(dir_name, exist_ok=True)

        move(path + "/" + fromname, path + "/" + toname)
        system(gitCommand + "add .")
        system(gitCommand + "commit -m 'moved " + fromname + "to" + toname + "'")


if __name__ == '__main__':
    cli(obj={})
